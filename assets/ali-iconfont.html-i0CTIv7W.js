import{_ as s,c as a,e as p,o as t}from"./app-D9fezM6y.js";const o={};function e(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="阿里图标库" tabindex="-1"><a class="header-anchor" href="#阿里图标库"><span>阿里图标库</span></a></h2><h3 id="font-class-用法" tabindex="-1"><a class="header-anchor" href="#font-class-用法"><span>Font class 用法</span></a></h3><p>只需要引入 css 和字体文件，把字体编码为 base64 格式，那只需要引入一个 css 文件即可</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">&#39;node-fetch&#39;</span></span>
<span class="line"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span></span>
<span class="line"><span class="token keyword">import</span> prompts <span class="token keyword">from</span> <span class="token string">&#39;prompts&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">validateUrl</span> <span class="token operator">=</span> <span class="token parameter">url</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/(font.*)\\.css</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token string">&#39;地址不对哦&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> questions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;输入下iconfont的fontClass地址？&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">validate</span><span class="token operator">:</span> validateUrl</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> cssUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token comment">// 指定保存字体文件的目录</span></span>
<span class="line"><span class="token keyword">const</span> fontDirectory <span class="token operator">=</span> <span class="token string">&#39;./fonts&#39;</span></span>
<span class="line"><span class="token keyword">const</span> cssDirectory <span class="token operator">=</span> <span class="token string">&#39;.s&#39;</span></span>
<span class="line"><span class="token comment">// 创建字体文件保存目录</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>fontDirectory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>fontDirectory<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 使用node-fetch获取CSS文件内容</span></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span>cssUrl<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">cssContent</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 使用正则表达式提取字体文件的URL</span></span>
<span class="line">      <span class="token keyword">const</span> fontUrls <span class="token operator">=</span> cssContent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">url\\(&#39;\\/\\/([^&#39;]+)&#39;\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>fontUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 使用Promise.all()等待所有字体文件的下载完成</span></span>
<span class="line">        Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span></span>
<span class="line">          fontUrls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fontUrl</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 提取URL中的字体文件链接</span></span>
<span class="line">            <span class="token keyword">const</span> urlMatch <span class="token operator">=</span> fontUrl<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">url\\(&#39;\\/\\/([^&#39;]+)&#39;\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>urlMatch <span class="token operator">&amp;&amp;</span> urlMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">const</span> fontFileUrl <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>urlMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 添加协议</span></span>
<span class="line">              <span class="token comment">// 下载字体文件并转换为Base64编码</span></span>
<span class="line">              <span class="token keyword">return</span> <span class="token function">fetchAndEncodeToBase64</span><span class="token punctuation">(</span>fontFileUrl<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">encodedFonts</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 将所有字体的Base64编码插入CSS</span></span>
<span class="line">          encodedFonts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">encodedFont<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            cssContent <span class="token operator">=</span> cssContent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>fontUrls<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> encodedFont<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">          <span class="token comment">// 生成包含所有字体的Base64编码的CSS文件</span></span>
<span class="line">          fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;src/styles/iconfont.scss&#39;</span><span class="token punctuation">,</span> cssContent<span class="token punctuation">)</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含所有字体的Base64编码的CSS文件已生成&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;未找到字体文件URL&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;下载CSS文件时出错：&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 下载字体文件并转换为Base64编码</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAndEncodeToBase64</span><span class="token punctuation">(</span><span class="token parameter">fontFileUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>fontFileUrl<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> buffer <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> base64Font <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> ext <span class="token operator">=</span> fontFileUrl<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fontFileUrl<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">url(&#39;data:application/font-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ext<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;charset=utf-8;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>base64Font<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">下载字体文件并转换为Base64编码时出错：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fontFileUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 返回一个空字符串以避免破坏CSS</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div>`,4)]))}const i=s(o,[["render",e]]),u=JSON.parse('{"path":"/general/frontend/tools/ali-iconfont.html","title":"小工具","lang":"zh-CN","frontmatter":{"title":"小工具"},"git":{"updatedTime":1748428667000,"contributors":[{"name":"zhouling","username":"zhouling","email":"1309515883@qq.com","commits":1,"url":"https://github.com/zhouling"},{"name":"carla","username":"carla","email":"1309515883@qq.com","commits":1,"url":"https://github.com/carla"}],"changelog":[{"hash":"ae15eecadccf3c79390038ae2dbb5a221950c243","time":1748428667000,"email":"1309515883@qq.com","author":"carla","message":"调整目录"},{"hash":"15d8c63066816914aa34686604930fe89ed37275","time":1694268022000,"email":"1309515883@qq.com","author":"zhouling","message":"阿里图标(class)文件脚本下载"}]},"filePathRelative":"general/frontend/tools/ali-iconfont.md"}');export{i as comp,u as data};
